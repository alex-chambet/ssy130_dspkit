function [] = gen_wavetable(filename, samplerates, varname, vartype, samplerate_include)
% GEN_WAVETABLE Generates a look-up-table intended for inclusion as a .h/.c
% file pair with a configurable number of sample-rates writing to disk with
% the same names as the input file.
% Valid vartype parameters are 'int8_t' and 'int16_t'.
%   GEN_WAVETABLE({'foo.wav', 'bar.wav'}, [48e3, 16e3], 'baz', 'int16_t',
%   'config.h') reads files foo.wav and bar.wav, generating look-up-tables
%   for a variable named baz with respective sample rates of 48kHz and
%   16kHz and using 16-bit variables for storage and includes a file
%   'config.h' which should define AUDIO_SAMPLE_RATE to either 48000 or
%   16000 and define either AUDIO_WAVEFORM_FOO and/or AUDIO_WAVEFORM_BAR to
%   selectively choose which waveform(s) to include for compilation.

% --------------------------------------- 
% Example For use with the SSY130 DSP-kit
% ---------------------------------------
% 
% Assume 'waveform1.wav' and 'waveform2.wav' exist in the current directory.
% Use the call
% 	gen_wavetable({'waveform1.wav', 'waveform2.wav'}, [48e3, 24e3, 16e3], 'waveform', 'int16_t', 'config.h');
% To generate wavetables for these two waveforms with the sample-rates,
% variable type, and include directives that are required.


for i=1:numel(filename)
	thisfile = filename{i};
	[audio_raw, audio_fs] = audioread(thisfile);

	idx = strfind(thisfile, '.');
	if(isempty(idx))
		error('filename error!');
	end
	filename_prefix = thisfile(1:idx(1)-1);

	if(strcmp(vartype, 'int8_t'))
		maxamp = floor((2^8-1)/2);
	elseif(strcmp(vartype, 'int16_t'))
		maxamp = floor((2^16-1)/2);
	else
		error('Invalid ''vartype'' parameter specified!');
	end

	fid_h = fopen([filename_prefix, '.h'], 'w');
	fid_c = fopen([filename_prefix, '.c'], 'w');

	fprintf(fid_h, '/** @file Automatically generated wavetable. Generated by gen_wavetable.m */\n');
	fprintf(fid_h, '#ifndef %s_H_\n#define %s_H_\n', upper(filename_prefix), upper(filename_prefix));
	fprintf(fid_h, '#include <stdint.h>\n');
	fprintf(fid_h, '#include "%s"\n\n', samplerate_include);
	fprintf(fid_h, '#if defined(AUDIO_WAVEFORM_%s)\n\n', upper(filename_prefix));
	fprintf(fid_c, '#include "./%s.h"\n', filename_prefix);
	fprintf(fid_c, '#if defined(AUDIO_WAVEFORM_%s)\n\n', upper(filename_prefix));

	audio_raw = mean(audio_raw, 2); %Mix everything to mono

	for i = 1:length(samplerates)
		audio_rs = resample(audio_raw, samplerates(i), audio_fs);

		integer_audio = round(audio_rs / max(abs(audio_rs)) * maxamp);

		%Generate the lookup-table for each sample rate
		fprintf(fid_h, '#if AUDIO_SAMPLE_RATE == %d\n', samplerates(i));
		fprintf(fid_h, 'extern const %s %s[%d];\n', vartype, varname, length(integer_audio));
		fprintf(fid_h, '#endif\n\n');

		fprintf(fid_c, '#if AUDIO_SAMPLE_RATE == %d\n', samplerates(i));
		fprintf(fid_c, 'const %s %s[%d] = {', vartype, varname, length(integer_audio));
		for j = 1:length(integer_audio)
			fprintf(fid_c, ' %d', integer_audio(j));
			if(j == length(integer_audio))
				fprintf(fid_c, '};\n'); 
			else
				fprintf(fid_c, ',');
			end
		end
			fprintf(fid_c, '#endif\n\n');
	end

	fprintf(fid_h, '#endif\n\n');
	fprintf(fid_h, '#endif\n');
	fprintf(fid_c, '#endif\n');
	fclose(fid_h);
	fclose(fid_c);
end
